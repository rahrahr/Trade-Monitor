Index: ui/bond_info_ui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport re\r\nfrom PyQt5 import QtWidgets, uic\r\nimport traceback\r\nimport sys\r\nsys.path.append(\"..\")\r\nfrom utils import *\r\n\r\nclass BondInfoUi(QtWidgets.QMdiSubWindow):\r\n    def __init__(self):\r\n        super(BondInfoUi, self).__init__()\r\n        uic.loadUi(\"ui/bond_info.ui\", self)\r\n        self.get_info.clicked.connect(self.getInfo)\r\n        self.start_calculation.clicked.connect(self.calculate)\r\n\r\n    def getInfo(self):\r\n        code = self.code.text()\r\n        clean_price = self.clean_price.text()\r\n        # 如果不输入净价，则把净价当100\r\n        clean_price = float(clean_price) if clean_price else 100\r\n        trade_date = self.trade_date.text()\r\n        if re.match(r'^\\d{6,}\\.(IB|SZ|SH)$', code) is None:\r\n            QtWidgets.QMessageBox().about(self, '错误信息', '债券代码格式错误')\r\n            return False\r\n\r\n        try:\r\n            quote = excel_utils.get_quote(code)\r\n            self.zhongzhai_clean_price.setText(\r\n                '{:.4f}'.format(quote['中债估值']['净价']))\r\n            self.zhongzhai_ytm.setText(\r\n                '{:.4f}'.format(quote['中债估值']['YTM']))\r\n\r\n            self.qingsuansuo_clean_price.setText(\r\n                '{:.4f}'.format(quote['清算所估值']['净价']))\r\n            self.qingsuansuo_ytm.setText(\r\n                '{:.4f}'.format(quote['清算所估值']['YTM']))\r\n\r\n            self.zhongzheng_clean_price.setText(\r\n                '{:.4f}'.format(quote['中证估值']['净价']))\r\n            self.zhongzheng_ytm.setText('{:.4f}'.format(quote['中证估值']['YTM']))\r\n        except:\r\n            QtWidgets.QMessageBox().about(self, '错误信息', '获取估值失败')\r\n            return False\r\n\r\n        utils.set_deviation(self, clean_price)\r\n        self._export_info()\r\n\r\n    def _export_info(self):\r\n        excel_utils._export_info(self)\r\n\r\n    def calculate(self):\r\n        self.getInfo()\r\n        code = self.code.text()\r\n        face_value = self.face_value.text() if self.face_value.text() else '0'\r\n        if not face_value.replace('.', '', 1).isdigit():\r\n            QtWidgets.QMessageBox().about(self, '错误信息', '券面金额错误')\r\n            return False\r\n        clean_price = self.clean_price.text()\r\n        if not clean_price.replace('.', '', 1).isdigit():\r\n            QtWidgets.QMessageBox().about(self, '错误信息', '净价错误')\r\n            return False\r\n        settlement_date = self.trade_date.text()\r\n        settlement_days = self.settlement_days.currentText()\r\n\r\n        # 计算到期收益率、应计利息、全价\r\n        try:\r\n            numbers = utils.get_numbers(\r\n                code, clean_price, settlement_date, settlement_days)\r\n            self.full_price.setText('{:.4f}'.format(\r\n                numbers['full price'] if numbers['full price'] else 0))\r\n            self.ytm.setText('{:.4f}'.format(\r\n                100 * numbers['ytm'] if numbers['ytm'] else 0))\r\n            self.accrued_interest.setText('{:.4f}'.format(\r\n                numbers['accrued interest'] if numbers['accrued interest'] else 0))\r\n            self.settlement_amount.setText('{:.4f}'.format(\r\n                numbers['full price'] * 100 * float(self.face_value.text())))\r\n        except:\r\n            QtWidgets.QMessageBox().about(self, '错误信息', '计算Yield、全价时出错')\r\n            return False\r\n        self._export_info()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ui/bond_info_ui.py b/ui/bond_info_ui.py
--- a/ui/bond_info_ui.py	(revision 7a87e68b310ff5abde0dc8d32e66d10bb595cb13)
+++ b/ui/bond_info_ui.py	(date 1627198663808)
@@ -39,7 +39,7 @@
                 '{:.4f}'.format(quote['中证估值']['净价']))
             self.zhongzheng_ytm.setText('{:.4f}'.format(quote['中证估值']['YTM']))
         except:
-            QtWidgets.QMessageBox().about(self, '错误信息', '获取估值失败')
+            QtWidgets.QMessageBox().about(self, '错误信息', '获取估值失败\n' + traceback.format_exc())
             return False
 
         utils.set_deviation(self, clean_price)
Index: gui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nimport json\r\nimport re\r\nfrom copy import deepcopy\r\nfrom PyQt5 import QtWidgets, uic, QtCore, QtGui\r\nfrom QuantLib import Date, China, Period\r\nimport traceback\r\n\r\nfrom ui import *\r\nfrom utils import *\r\nimport trade\r\n\r\n\r\nclass Ui(QtWidgets.QMainWindow):\r\n    def __init__(self):\r\n        super(Ui, self).__init__()\r\n        self.resize(1500, 1000)\r\n        layout_1 = QtWidgets.QHBoxLayout()\r\n        layout_2 = QtWidgets.QHBoxLayout()\r\n\r\n        self.trader_ui = TraderUi()\r\n        self.counterparty_ui = CounterpartyUi()\r\n        self.bond_info_ui = BondInfoUi()\r\n        self.transfer_ui = TransferUi()\r\n\r\n        layout_1.addWidget(self.trader_ui)\r\n        layout_1.addWidget(self.counterparty_ui)\r\n        layout_2.addWidget(self.bond_info_ui)\r\n        layout_2.addWidget(self.transfer_ui)\r\n\r\n        mainlayout = QtWidgets.QVBoxLayout()\r\n        mainlayout.addLayout(layout_1, 10)\r\n        mainlayout.addLayout(layout_2, 60)\r\n        widget = QtWidgets.QWidget()\r\n        widget.setLayout(mainlayout)\r\n        self.setCentralWidget(widget)\r\n\r\n        self.bond_info_ui.get_position.clicked.connect(self.getPosition)\r\n        self.bond_info_ui.send_order.clicked.connect(self.sendOrder)\r\n        self.bond_info_ui.is_last_trade.clicked.connect(self.updateTplus1)\r\n        self.bond_info_ui.send_settlement.clicked.connect(self.sendSettlement)\r\n\r\n        self.transfer_ui.send_order.clicked.connect(self.sendTransferOrder)\r\n        self.transfer_ui.is_last_trade.clicked.connect(self.updateTransfer)\r\n\r\n        # create Portfolio instances for all accounts.\r\n        self.portfolios = {}\r\n        portflios = json.load(open('trader.json', encoding='utf-8'))\r\n        for key_1 in portflios.keys():\r\n            for key_2, item_2 in portflios[key_1].items():\r\n                account = key_1 + key_2\r\n                self.portfolios[key_1 + key_2] =\\\r\n                    portfolio_utils.create_portfolio(account)\r\n                # Makes it easier to update json file\r\n                self.portfolios[key_1 + key_2].key_1 = key_1\r\n                self.portfolios[key_1 + key_2].key_2 = key_2\r\n\r\n    def getPosition(self):\r\n        trader_position = json.load(open('trader.json', encoding='utf-8'))[\r\n            self.trader_ui.list_type.currentText()]\r\n\r\n        trader_id = self.trader_ui.account_list.currentText()\r\n        code = self.bond_info_ui.code.text()\r\n\r\n        bond_position = trader_position[trader_id]['position'].get(code, 0)\r\n        cash_position = trader_position[trader_id]['cash']\r\n\r\n        self.bond_info_ui.bond_position.setText(str(bond_position))\r\n        self.bond_info_ui.cash_position.setText(str(cash_position))\r\n\r\n    def _export_trader_info(self):\r\n        excel_utils._export_trader_info(self)\r\n\r\n    def sendOrder(self):\r\n        self.bond_info_ui._export_info()\r\n        self._export_trader_info()\r\n        x = compliance.check_spot_order()\r\n        if ('失败' in x) or ('不合规' in x) or ('不达标' in x):\r\n            error_message = '报单失败，失败原因：\\n'+'!\\n'.join(x.split('！'))\r\n            QtWidgets.QMessageBox().about(self, '错误信息', error_message)\r\n            return False\r\n\r\n        elif '预警' in x:\r\n            error_message = '交易预警：\\n'+'!\\n'.join(x.split('！'))\r\n            QtWidgets.QMessageBox().about(self, '预警', error_message)\r\n\r\n        try:\r\n            trade = trade_utils.create_spot_trade()\r\n        except:\r\n            QtWidgets.QMessageBox().about(self, '错误信息', traceback.format_exc())\r\n            return False\r\n\r\n        # 更新Portfolio对象\r\n        try:\r\n            account = trade.inside_id\r\n            self.portfolios[account].append_waiting_trade(trade)\r\n            self.portfolios[account].portfolio_update_t0(trade)\r\n\r\n            if trade.is_inside_trade:\r\n                account = trade.other_inside_id\r\n                self.portfolios[account].append_waiting_trade(\r\n                    trade.reversed())\r\n                self.portfolios[account].portfolio_update_t0(\r\n                    trade.reversed())\r\n\r\n        except:\r\n            QtWidgets.QMessageBox().about(\r\n                self, '错误信息', traceback.format_exc())\r\n            return False\r\n\r\n        # 写入Excel和json文件\r\n        if not trade.is_inside_trade:\r\n            self.portfolios[trade.inside_id].to_excel()\r\n            self.portfolios[trade.inside_id].to_json()\r\n        else:\r\n            self.portfolios[trade.inside_id].to_excel()\r\n            self.portfolios[trade.other_inside_id].to_excel()\r\n\r\n            self.portfolios[trade.inside_id].to_json()\r\n            portfolio_utils.to_json(self.portfolios[trade.other_inside_id])\r\n\r\n        QtWidgets.QMessageBox().about(self, '', '报单完成')\r\n\r\n    def sendTransferOrder(self):\r\n        self.transfer_ui._export_transfer_info()\r\n        x = compliance.check_transfer_order()\r\n        if x != '交易成功':\r\n            error_message = '转托管报单失败，失败原因：\\n'+'!\\n'.join(x.split('！'))\r\n            QtWidgets.QMessageBox().about(self, '错误信息', error_message)\r\n            return False\r\n\r\n        try:\r\n            trade = trade_utils.create_transfer_trade()\r\n            trade_ = deepcopy(trade)\r\n            trade.settlement_date = trade.trade_time\r\n        except:\r\n            QtWidgets.QMessageBox().about(self, '错误信息', traceback.format_exc())\r\n            return False\r\n\r\n        # 更新Portfolio对象\r\n        try:\r\n            trade.settlement_days == 'T+1'\r\n            account = trade.inside_id\r\n            self.portfolios[account].append_waiting_trade(trade)\r\n            self.portfolios[account].portfolio_update_t0(trade)\r\n\r\n            account = trade.other_inside_id\r\n            self.portfolios[account].append_waiting_trade(\r\n                trade_.reversed())\r\n            self.portfolios[account].portfolio_update_t0(trade_.reversed())\r\n\r\n        except:\r\n            QtWidgets.QMessageBox().about(\r\n                self, '错误信息', traceback.format_exc())\r\n            return False\r\n\r\n        # 写入Excel和json文件\r\n        if not trade.is_inside_trade:\r\n            portfolio_utils.to_excel(self.portfolios[trade.inside_id])\r\n            portfolio_utils.to_json(self.portfolios[trade.inside_id])\r\n        else:\r\n            portfolio_utils.to_excel(self.portfolios[trade.inside_id])\r\n            portfolio_utils.to_excel(self.portfolios[trade.other_inside_id])\r\n\r\n            portfolio_utils.to_json(self.portfolios[trade.inside_id])\r\n            portfolio_utils.to_json(self.portfolios[trade.other_inside_id])\r\n\r\n        QtWidgets.QMessageBox().about(self, '', '报单完成')\r\n\r\n    def sendSettlement(self):\r\n        # 当前账户提交清算申请\r\n        list_type = self.trader_ui.list_type.currentText()\r\n        trader_id = self.trader_ui.account_list.currentText()\r\n        key = list_type + trader_id\r\n\r\n        self.portfolios[key].settle()\r\n        QtWidgets.QMessageBox().about(self, '', '结算报单完成')\r\n\r\n    def checkSufficiency(self):\r\n        prompt_msg = []\r\n        popup = QtWidgets.QMainWindow(parent=self)\r\n        mainlayout = QtWidgets.QVBoxLayout()\r\n        widget = QtWidgets.QWidget()\r\n        widget.setLayout(mainlayout)\r\n        popup.setCentralWidget(widget)\r\n\r\n        for key in self.portfolios:\r\n            temp_portfolio = deepcopy(self.portfolios[key])\r\n            temp_portfolio.settle()\r\n            bonds_not_enough = temp_portfolio.bonds[temp_portfolio.bonds['par_amount'] < 0]\r\n            if not bonds_not_enough.empty:\r\n                x = bonds_not_enough['bond_code'].to_list()\r\n                msg = ['{}-{}现券持仓不足'.format(key, i) for i in x]\r\n                prompt_msg.extend(msg)\r\n            # display current positions\r\n            df_ = displayDataFrame(temp_portfolio.bonds, key, self)\r\n            mainlayout.addWidget(df_)\r\n\r\n        msg = QtWidgets.QMessageBox()\r\n        text = \"若不进行转托管操作，账户持仓如下，请选择是否进行接下去的操作\"\r\n        msg.setText(text)\r\n        msg.setWindowTitle(\"请选择\")\r\n        msg.setStandardButtons(\r\n            QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)\r\n        mainlayout.addWidget(msg)\r\n        popup.show()\r\n        retval = msg.exec_()\r\n        popup.close()\r\n        return prompt_msg, retval\r\n\r\n    def updateTplus1(self):\r\n        # 更新明天到账的T+1交易，调用后now_time会+1\r\n        # 首先检查是否存在需要弥补交易\r\n        prompt_msg, retval = self.checkSufficiency()\r\n        if retval == QtWidgets.QMessageBox.No:\r\n            # 中止本函数运行\r\n            return\r\n\r\n        if prompt_msg:\r\n            msg = QtWidgets.QMessageBox()\r\n            text = \"更新持仓中止，以下现券不足，请选择是否进行自动内部转托管\\n\" + '\\n'.join(prompt_msg)\r\n            msg.setText(text)\r\n            msg.setWindowTitle(\"持仓不足警示\")\r\n            msg.setStandardButtons(\r\n                QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)\r\n            retval = msg.exec_()\r\n\r\n            # 若选择Yes，则进入此分支，进行自动转托管\r\n            if retval == QtWidgets.QMessageBox.Yes:\r\n                self.autoTransfer()\r\n                QtWidgets.QMessageBox().about(self, '提示信息', '自动转托管完成，请再次点击“完成今日交易”按钮')\r\n                return\r\n            # 若不选择，则继续更新T+1持仓\r\n\r\n        # 更新T+1\r\n        cal = China(China.IB)\r\n        for key in self.portfolios:\r\n            date = self.portfolios[key].now_time\r\n            if isinstance(date, datetime.datetime):\r\n                date = date.date().isoformat().replace('-', '/')\r\n            x = date.split('/')\r\n            ql_date = Date(int(x[2]), int(x[1]), int(x[0]))\r\n            next_trading_day = cal.advance(\r\n                ql_date, Period('1D')).ISO().split('-')\r\n            next_trading_day = ql_date.ISO().replace('-', '/')\r\n            self.portfolios[key].now_time = next_trading_day\r\n            self.portfolios[key].portfolio_update_t1()\r\n\r\n            self.portfolios[key].to_excel()\r\n            self.portfolios[key].to_json()\r\n            self.portfolios[key].log()\r\n\r\n        QtWidgets.QMessageBox().about(self, '', '更新完成')\r\n\r\n    def updateTransfer(self):\r\n        # 更新明天到账的转托管交易，调用后now_time会+1\r\n        cal = China(China.IB)\r\n        for key in self.portfolios:\r\n            date = self.portfolios[key].now_time\r\n            if isinstance(date, datetime.datetime):\r\n                date = date.date().isoformat().replace('-', '/')\r\n            x = date.split('/')\r\n            ql_date = Date(int(x[2]), int(x[1]), int(x[0]))\r\n            next_trading_day = cal.advance(\r\n                ql_date, Period('1D')).ISO().replace('-', '/')\r\n            self.portfolios[key].now_time = next_trading_day\r\n            self.portfolios[key].portfolio_update_transfer()\r\n\r\n            self.portfolios[key].to_excel()\r\n            self.portfolios[key].to_json()\r\n            self.portfolios[key].log()\r\n\r\n        QtWidgets.QMessageBox().about(self, '', '更新完成')\r\n\r\n    def autoTransfer(self):\r\n        # 判断各内部账户中是否存在互补，并进行提示\r\n        # 转托管仍需要手动输入\r\n        temp_portfolios = {}\r\n        for key in self.portfolios:\r\n            temp_portfolios[key] = deepcopy(self.portfolios[key])\r\n            temp_portfolios[key].settle()\r\n            bonds_not_enough = temp_portfolios[key].bonds[temp_portfolios.bonds['par_amount'] < 0]\r\n\r\n\r\nclass PandasModel(QtCore.QAbstractTableModel):\r\n\r\n    def __init__(self, data):\r\n        QtCore.QAbstractTableModel.__init__(self)\r\n        self._data = data\r\n\r\n    def rowCount(self, parent=None):\r\n        return self._data.shape[0]\r\n\r\n    def columnCount(self, parnet=None):\r\n        return self._data.shape[1]\r\n\r\n    def data(self, index, role=QtCore.Qt.DisplayRole):\r\n        if index.isValid():\r\n            if role == QtCore.Qt.DisplayRole:\r\n                return str(self._data.iloc[index.row(), index.column()])\r\n        return None\r\n\r\n    def headerData(self, col, orientation, role):\r\n        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:\r\n            return self._data.columns[col]\r\n        return None\r\n\r\n\r\ndef displayDataFrame(df, title='', parent=None):\r\n    popup = QtWidgets.QMainWindow(parent=parent)\r\n    popup.setWindowTitle(title)\r\n    popup.view = QtWidgets.QTableView()\r\n    model = PandasModel(df)\r\n    popup.view.setModel(model)\r\n    popup.view.resize(800, 400)\r\n    popup.setCentralWidget(popup.view)\r\n    return popup\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gui.py b/gui.py
--- a/gui.py	(revision 7a87e68b310ff5abde0dc8d32e66d10bb595cb13)
+++ b/gui.py	(date 1627199288348)
@@ -95,7 +95,7 @@
             account = trade.inside_id
             self.portfolios[account].append_waiting_trade(trade)
             self.portfolios[account].portfolio_update_t0(trade)
-
+            print(self.portfolios[account].all_trade)
             if trade.is_inside_trade:
                 account = trade.other_inside_id
                 self.portfolios[account].append_waiting_trade(
@@ -203,6 +203,7 @@
         msg.setStandardButtons(
             QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)
         mainlayout.addWidget(msg)
+        popup.resize(600, 600)
         popup.show()
         retval = msg.exec_()
         popup.close()
Index: trade.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from dataclasses import dataclass\r\nfrom itertools import count\r\n\r\n@dataclass\r\nclass Trade:\r\n    '''\r\n    记录一笔交易的基本信息\r\n    '''\r\n    id = count()\r\n    def __init__(self,\r\n                 bond_code: str = '',\r\n                 amount: float = 0,\r\n                 par_amount: float = 10,\r\n                 volume: int = 10,\r\n                 trade_time: str = '2021-07-01',\r\n                 settlement_date: str = '2021-07-01',\r\n                 settlement_days: str = '2021-07-01',\r\n                 direction: str = '买入',\r\n                 is_inside_trade: bool = False,\r\n                 inside_id: str = '',\r\n                 other_inside_id: str = ''):\r\n\r\n        self.id = next(Trade.id)\r\n        self.bond_code: str = bond_code\r\n        self.amount: float = amount\r\n        self.par_amount: float = par_amount\r\n        self.volume: int = volume\r\n\r\n        self.trade_time: str = trade_time\r\n        self.settlement_date: str = settlement_date\r\n        self.settlement_days: str = settlement_days\r\n        self.is_settled: bool = False\r\n        self.direction: str = direction\r\n\r\n        self.is_inside_trade: bool = is_inside_trade\r\n        self.inside_id: str = inside_id\r\n        if is_inside_trade:\r\n            self.other_inside_id = other_inside_id\r\n\r\n    def reversed(self):\r\n        if hasattr(self, 'in_bond_code'):\r\n            #转托管\r\n            trade = Trade(self.in_bond_code, self.amount,\r\n                          self.par_amount, self.volume,\r\n                          self.trade_time, self.settlement_date,\r\n                          self.settlement_days, reversed_direction,\r\n                          self.is_inside_trade, self.other_inside_id,\r\n                          self.inside_id)\r\n            trade.in_bond_code = self.bond_code\r\n            trade.id = self.id\r\n            return trade\r\n            \r\n        reversed_direction = \"卖出\" if self.direction == \"买入\" else \"买入\"\r\n        return Trade(self.bond_code, self.amount,\r\n                     self.par_amount, self.volume,\r\n                     self.trade_time, self.settlement_date,\r\n                     self.settlement_days, reversed_direction,\r\n                     self.is_inside_trade, self.other_inside_id,\r\n                     self.inside_id)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/trade.py b/trade.py
--- a/trade.py	(revision 7a87e68b310ff5abde0dc8d32e66d10bb595cb13)
+++ b/trade.py	(date 1627198663826)
@@ -40,6 +40,7 @@
     def reversed(self):
         if hasattr(self, 'in_bond_code'):
             #转托管
+            reversed_direction = '转托管-转入'
             trade = Trade(self.in_bond_code, self.amount,
                           self.par_amount, self.volume,
                           self.trade_time, self.settlement_date,
Index: portfolio.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from dataclasses import dataclass\r\nfrom trade import *\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom utils import portfolio_utils\r\n\r\n\r\n@dataclass\r\nclass Portfolio:\r\n    # 记录投资组合\r\n    def __init__(self,\r\n                 account: str,\r\n                 now_time: str,\r\n                 cash: float,\r\n                 bonds: pd.DataFrame):\r\n\r\n        self.account = account\r\n        self.now_time = now_time\r\n        self.cash = cash\r\n        self.freeze_cash = 0\r\n        self.bonds = bonds\r\n        self.all_trade = pd.DataFrame(None,\r\n                                      columns=['bond_code', 'settlement_date',\r\n                                               'direction', 'amount',\r\n                                               'volume', 'par_amount', 'in_bond_code', 'is_settled'])\r\n        self.failed_trade = pd.DataFrame(None,\r\n                                         columns=['bond_code', 'settlement_date',\r\n                                                  'direction', 'amount',\r\n                                                  'volume', 'par_amount', 'in_bond_code', 'is_settled'])\r\n\r\n    @property\r\n    def waiting_trade(self):\r\n        # 保存所有当日不进行结算的交易\r\n        return self.all_trade[self.all_trade.settlement_date > self.now_time]\r\n\r\n    @property\r\n    def waiting_settlement(self):\r\n        # 保存所有当日进行结算的交易\r\n        return self.all_trade[(self.all_trade.settlement_date == self.now_time) & (~self.all_trade.is_settled)]\r\n\r\n    @property\r\n    def free_cash(self):\r\n        return self.cash - self.freeze_cash\r\n\r\n    def append_waiting_trade(self, trade: Trade):\r\n        x = pd.DataFrame([[trade.bond_code, trade.settlement_date,\r\n                           trade.direction, trade.amount,\r\n                           trade.volume, trade.par_amount, trade.is_settled]],\r\n                         columns=['bond_code', 'settlement_date',\r\n                                  'direction', 'amount',\r\n                                  'volume', 'par_amount', 'is_settled'],\r\n                         index=[trade.id])\r\n\r\n        if hasattr(trade, 'in_bond_code'):\r\n            x = pd.DataFrame([[trade.bond_code, trade.settlement_date,\r\n                               trade.direction, trade.amount,\r\n                               trade.volume, trade.par_amount, trade.in_bond_code,\r\n                               trade.is_settled]],\r\n                             columns=['bond_code', 'settlement_date',\r\n                                      'direction', 'amount',\r\n                                      'volume', 'par_amount', 'in_bond_code',\r\n                                      'is_settled'],\r\n                             index=[trade.id])\r\n        self.all_trade = self.all_trade.append(x)\r\n\r\n    def append_failed_trade(self, trade):\r\n        x = pd.DataFrame([[trade.bond_code, trade.settlement_date,\r\n                           trade.direction, trade.amount,\r\n                           trade.volume, trade.par_amount, trade.is_settled]],\r\n                         columns=['bond_code', 'settlement_date',\r\n                                  'direction', 'amount',\r\n                                  'volume', 'par_amount', 'is_settled'],\r\n                         index=[trade.id])\r\n\r\n        if hasattr(trade, 'in_bond_code'):\r\n            x = pd.DataFrame([[trade.bond_code, trade.settlement_date,\r\n                               trade.direction, trade.amount,\r\n                               trade.volume, trade.par_amount, trade.in_bond_code,\r\n                               trade.is_settled]],\r\n                             columns=['bond_code', 'settlement_date',\r\n                                      'direction', 'amount',\r\n                                      'volume', 'par_amount', 'in_bond_code',\r\n                                      'is_settled'],\r\n                             index=[trade.id])\r\n        self.failed_trade = self.failed_trade.append(x)\r\n\r\n    def bonds_add(self, trade):\r\n        # 债券记加\r\n        if trade.bond_code in self.bonds.bond_code.to_list():\r\n            self.bonds.loc[self.bonds.bond_code ==\r\n                           trade.bond_code, \"volume\"] += trade.volume\r\n            self.bonds.loc[self.bonds.bond_code ==\r\n                           trade.bond_code, \"par_amount\"] += trade.par_amount\r\n            self.bonds.loc[self.bonds.bond_code ==\r\n                           trade.bond_code, \"amount\"] += trade.amount\r\n        else:\r\n            new_bond = pd.DataFrame([[self.bonds.shape[0] + 1, trade.bond_code, trade.par_amount, trade.volume, trade.amount]],\r\n                                    columns=[\"number\", \"bond_code\", \"par_amount\", \"volume\", \"amount\"])\r\n            self.bonds = pd.concat([self.bonds, new_bond])\r\n\r\n    def bonds_minus(self, trade):\r\n        # 债券记减\r\n        if trade.volume < max(self.bonds.loc[self.bonds.bond_code == trade.bond_code, \"volume\"].iloc[0], 1):\r\n            self.bonds.loc[self.bonds.bond_code ==\r\n                           trade.bond_code, \"volume\"] -= trade.volume\r\n            self.bonds.loc[self.bonds.bond_code ==\r\n                           trade.bond_code, \"par_amount\"] -= trade.par_amount\r\n            self.bonds.loc[self.bonds.bond_code ==\r\n                           trade.bond_code, \"amount\"] -= trade.amount\r\n        else:\r\n            self.bonds = self.bonds[self.bonds.bond_code != trade.bond_code]\r\n            self.bonds.number = list(range(1, self.bonds.shape[0] + 1))\r\n\r\n    def portfolio_update_t0(self, trade: Trade):\r\n        # 更新现券交易的交易所T+1交易时的T+0的现券转移部分，资金转移放在T+1函数内结算\r\n        # 买入 - 冻结资金增加； 卖出 - 冻结资金不变\r\n        if trade.bond_code[-2:] == \"IB\" or trade.direction == \"转托管\":\r\n            return\r\n        self.now_time = trade.trade_time\r\n        if trade.direction == \"买入\":\r\n            self.freeze_cash += trade.amount\r\n            self.bonds_add(trade)\r\n        elif trade.direction == \"卖出\":\r\n            self.bonds_minus(trade)\r\n\r\n    def portfolio_update_t1(self):\r\n        # 现券交易 - 交易所T+1 - 结算\r\n        # Assumption: 一定结算成功\r\n        trades = self.waiting_settlement[(self.waiting_settlement.bond_code[-2:] != \"IB\") &\r\n                                         ((self.waiting_settlement.direction == \"买入\") | (self.waiting_settlement.direction == \"卖出\"))]\r\n        if trades.shape[0] == 0:\r\n            return\r\n        for i in trades.index:\r\n            each_trade = trades.loc[i, :]\r\n            if each_trade.direction == \"买入\":\r\n                self.cash -= each_trade.amount\r\n                self.freeze_cash -= each_trade.amount\r\n            elif each_trade.direction == \"卖出\":\r\n                self.cash += each_trade.amount\r\n            self.all_trade.loc[i, \"is_settled\"] = True\r\n\r\n    def transfer_amount_adjust(self, trade):\r\n        # 根据目前尚存的债券数量，对执行的转托管进行调整\r\n        temp_ = self.bonds.loc[self.bonds.bond_code == trade.bond_code,\r\n                               \"par_amount\"] if trade.bond_code in self.bonds.bond_code.to_list() else 0\r\n        trade.par_amount = min(trade.par_amount, temp_)\r\n        trade.volume = trade.par_amount / 100\r\n        trade.amount = min(trade.amount, temp_ * trade.amount/trade.par_amount)\r\n\r\n        self.all_trade.loc[(self.all_trade.index == trade.name) & (\r\n            self.all_trade.direction == \"转托管\"), \"par_amount\"] = trade.par_amount\r\n        self.all_trade.loc[(self.all_trade.index == trade.name) & (\r\n            self.all_trade.direction == \"转托管\"), \"volume\"] = trade.volume\r\n        self.all_trade.loc[(self.all_trade.index == trade.name) & (\r\n            self.all_trade.direction == \"转托管\"), \"amount\"] = trade.amount\r\n        self.all_trade.loc[(self.all_trade.index == trade.name) & (\r\n            self.all_trade.direction == \"转托管-转入\"), \"par_amount\"] = trade.par_amount\r\n        self.all_trade.loc[(self.all_trade.index == trade.name) & (\r\n            self.all_trade.direction == \"转托管-转入\"), \"volume\"] = trade.volume\r\n        self.all_trade.loc[(self.all_trade.index == trade.name) & (\r\n            self.all_trade.direction == \"转托管-转入\"), \"amount\"] = trade.amount\r\n        return trade\r\n\r\n    def portfolio_update_transfer(self, direction=\"out\"):\r\n        # 更新转托管的T+0的记减 - 转出账户\r\n        if direction == \"out\":\r\n            trades = self.waiting_settlement[self.waiting_settlement.direction == \"转托管\"]\r\n            if trades.shape[0] == 0:\r\n                return\r\n            for i in trades.index:\r\n                each_trade = trades.loc[i, :]\r\n                each_trade = self.transfer_amount_adjust(\r\n                    each_trade)  # 对转托管的量进行调整\r\n                if each_trade.par_amount > 0:  # 只有当账户内还存在对应债券时，才会进行转托管\r\n                    self.bonds_minus(each_trade)\r\n                    self.all_trade.loc[(self.all_trade.index == i) & (\r\n                        self.all_trade.direction == \"转托管\"), \"is_settled\"].iloc[0] = True\r\n        # 更新转托管的T+1或T+2的记加 - 转入账户\r\n        elif direction == \"in\":\r\n            trades = self.waiting_settlement[self.waiting_settlement.direction == \"转托管-转入\"]\r\n            if trades.shape[0] == 0:\r\n                return\r\n            for i in trades.index:\r\n                if self.all_trade.loc[(self.all_trade.index == i) & (self.all_trade.direction == \"转托管\"), \"is_settled\"].iloc[0]:\r\n                    each_trade = trades.loc[i, :]\r\n                    self.bonds_add(each_trade)\r\n                    self.all_trade.loc[(self.all_trade.index == i) & (\r\n                        self.all_trade.direction == \"转托管-转入\"), \"is_settled\"].iloc[0] = True\r\n\r\n    def get_NIB_(self, code_trade):\r\n        # 银行间交易单代码结算逻辑\r\n        # 判断能否全部结算\r\n        code = code_trade[\"bond_code\"].iloc[0]\r\n        net_sell_bond = code_trade.loc[code_trade.direction == \"卖出\", \"par_amount\"].sum(\r\n        ) - code_trade.loc[code_trade.direction == \"买入\", \"par_amount\"].sum()\r\n\r\n        net_cost_cash = code_trade.loc[code_trade.direction == \"买入\", \"amount\"].sum(\r\n        ) - code.trade.loc[code_trade.direction == \"卖出\", \"amount\"].sum()\r\n\r\n        if net_sell_bond <= self.bonds.loc[self.bonds.bond_code == code, \"par_amount\"] and net_cost_cash <= self.cash:\r\n            for i in code_trade.index:\r\n                self.all_trade.loc[i, \"is_settled\"] = True  # 所有交易均能结算\r\n            self.cash -= net_cost_cash\r\n            if net_sell_bond < self.bonds.loc[self.bonds.bond_code == code, \"par_amount\"]:\r\n                self.bonds.loc[self.bonds.bond_code ==\r\n                               code, \"volume\"] -= net_sell_bond / 100\r\n                self.bonds.loc[self.bonds.bond_code ==\r\n                               code, \"par_amount\"] -= net_sell_bond\r\n                self.bonds.loc[self.bonds.bond_code ==\r\n                               code, \"amount\"] += net_cost_cash\r\n            else:\r\n                self.bonds = self.bonds[self.bonds.bond_code != code]\r\n                self.bonds.number = list(range(1, self.bonds.shape[0] + 1))\r\n        # 如果不能全部结算，则将不满足条件的去除，剩余的结算\r\n        else:\r\n            sell_trade = code_trade.loc[code_trade.direction == \"卖出\"]\r\n            buy_trade = code_trade.loc[code_trade.direction == \"买入\"]\r\n            if net_sell_bond > self.bonds.loc[self.bonds.bond_code == code, \"par_amount\"]:\r\n                # 卖多了，则从卖出的交易中去除\r\n                max_sell_bond = self.bonds.loc[self.bonds.bond_code ==\r\n                                               code, \"par_amount\"]\r\n                a = sell_trade[\"par_amount\"].to_list()\r\n                b = np.zeros(len(a))\r\n                self.get_nearst(a, begin=0, b=b, M=max_sell_bond)\r\n                for i in range(len(b)):\r\n                    each_trade = sell_trade.iloc[i, :]\r\n                    if b[i]:\r\n                        self.cash += each_trade.amount\r\n                        self.bonds_minus(each_trade)\r\n                        self.all_trade.loc[self.all_trade.index ==\r\n                                           each_trade.name, \"is_settled\"] = True\r\n                    else:\r\n                        self.append_failed_trade(each_trade)\r\n                # 买入的交易全部执行\r\n                for i in buy_trade.index:\r\n                    each_trade = buy_trade.loc[i, :]\r\n                    self.cash -= each_trade.amount\r\n                    self.bonds_add(each_trade)\r\n                    self.all_trade.loc[self.all_trade.index ==\r\n                                       i, \"is_settled\"] = True\r\n            elif net_cost_cash > self.cash:\r\n                # 买多了，则从买入的交易中去除\r\n                max_buy_cash = self.cash\r\n                a = buy_trade[\"amount\"].to_list()\r\n                b = np.zeros(len(a))\r\n                self.get_nearst(a, begin=0, b=b, M=max_buy_cash)\r\n                for i in range(len(b)):\r\n                    each_trade = buy_trade.iloc[i, :]\r\n                    if b[i]:\r\n                        self.cash -= each_trade.amount\r\n                        self.bonds_add(each_trade)\r\n                        self.all_trade.loc[self.all_trade.index ==\r\n                                           each_trade.name, \"is_settled\"] = True\r\n                    else:\r\n                        self.append_failed_trade(each_trade)\r\n                # 卖出的交易全部执行\r\n                for i in sell_trade.index:\r\n                    each_trade = sell_trade.loc[i, :]\r\n                    self.cash += each_trade.amount\r\n                    self.bonds_minus(each_trade)\r\n                    self.all_trade.loc[self.all_trade.index ==\r\n                                       i, \"is_settled\"] = True\r\n\r\n    def settle(self):\r\n        # 单个账户结算\r\n        # 交易所T+1的全部结算成功\r\n        self.portfolio_update_t1()\r\n        # 银行间T+1和T+0的结算排序结算\r\n        trades = self.waiting_settlement[(self.waiting_settlement.bond_code[-2:] == \"IB\") &\r\n                                         ((self.waiting_settlement.direction == \"买入\") | (self.waiting_settlement.direction == \"卖出\"))]\r\n        trades = trades.sort_values(by=[\"direction\", \"par_amount\"], ascending=(\r\n            False, False))  # 先卖出后买入，票面金额从大到小排序\r\n        code_sig = trades.drop_duplicates(\r\n            subset=[\"bond_code\"]).bond_code.to_list()\r\n        for code in code_sig:\r\n            code_trade = trades.loc[trades.bonds_code == code]\r\n            self.get_NIB_(code_trade)\r\n        # 转托管结算\r\n        self.portfolio_update_transfer(direction=\"out\")\r\n\r\n    def to_excel(self):\r\n        portfolio_utils.to_excel(self)\r\n\r\n    def to_json(self):\r\n        portfolio_utils.to_json(self)\r\n\r\n    def log(self):\r\n        log_name = 'logs/log_{}_{}.csv'.format(\r\n            self.account, self.now_time.replace('/', ''))\r\n        self.all_trade.to_csv(log_name)\r\n\r\n    def get_nearst(self, a, begin, b, M):\r\n        # 递归函数，找到一组数中间和最接近且小于M的组合\r\n        if begin >= len(a):\r\n            return M\r\n        k1 = self.get_nearst(a, begin + 1, b, M - a[begin])\r\n        k2 = self.get_nearst(a, begin + 1, b, M)\r\n        if k1 >= 0 and k2 >= 0:\r\n            if k1 <= k2:\r\n                b[begin] = True\r\n                return self.get_nearst(a, begin + 1, b, M - a[begin])\r\n            else:\r\n                b[begin] = False\r\n                return self.get_nearst(a, begin + 1, b, M)\r\n        if k1 >= 0 and k2 < 0:\r\n            b[begin] = True\r\n            return self.get_nearst(a, begin + 1, b, M - a[begin])\r\n        if k1 < 0:\r\n            b[begin] = False\r\n            return self.get_nearst(a, begin + 1, b, M)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/portfolio.py b/portfolio.py
--- a/portfolio.py	(revision 7a87e68b310ff5abde0dc8d32e66d10bb595cb13)
+++ b/portfolio.py	(date 1627207622121)
@@ -116,6 +116,7 @@
         # 买入 - 冻结资金增加； 卖出 - 冻结资金不变
         if trade.bond_code[-2:] == "IB" or trade.direction == "转托管":
             return
+        print("!!!")
         self.now_time = trade.trade_time
         if trade.direction == "买入":
             self.freeze_cash += trade.amount
@@ -126,8 +127,10 @@
     def portfolio_update_t1(self):
         # 现券交易 - 交易所T+1 - 结算
         # Assumption: 一定结算成功
-        trades = self.waiting_settlement[(self.waiting_settlement.bond_code[-2:] != "IB") &
+        trades = self.waiting_settlement[(self.waiting_settlement.bond_code.map(lambda x: x[-2:]) != 'IB') &
                                          ((self.waiting_settlement.direction == "买入") | (self.waiting_settlement.direction == "卖出"))]
+        print(trades)
+        print(self.now_time)
         if trades.shape[0] == 0:
             return
         for i in trades.index:
@@ -195,13 +198,13 @@
         ) - code_trade.loc[code_trade.direction == "买入", "par_amount"].sum()
 
         net_cost_cash = code_trade.loc[code_trade.direction == "买入", "amount"].sum(
-        ) - code.trade.loc[code_trade.direction == "卖出", "amount"].sum()
+        ) - code_trade.loc[code_trade.direction == "卖出", "amount"].sum()
 
-        if net_sell_bond <= self.bonds.loc[self.bonds.bond_code == code, "par_amount"] and net_cost_cash <= self.cash:
+        if net_sell_bond <= self.bonds.loc[self.bonds.bond_code == code, "par_amount"].iloc[0] and net_cost_cash <= self.cash:
             for i in code_trade.index:
                 self.all_trade.loc[i, "is_settled"] = True  # 所有交易均能结算
             self.cash -= net_cost_cash
-            if net_sell_bond < self.bonds.loc[self.bonds.bond_code == code, "par_amount"]:
+            if net_sell_bond < self.bonds.loc[self.bonds.bond_code == code, "par_amount"].iloc[0]:
                 self.bonds.loc[self.bonds.bond_code ==
                                code, "volume"] -= net_sell_bond / 100
                 self.bonds.loc[self.bonds.bond_code ==
@@ -215,10 +218,10 @@
         else:
             sell_trade = code_trade.loc[code_trade.direction == "卖出"]
             buy_trade = code_trade.loc[code_trade.direction == "买入"]
-            if net_sell_bond > self.bonds.loc[self.bonds.bond_code == code, "par_amount"]:
+            if net_sell_bond > self.bonds.loc[self.bonds.bond_code == code, "par_amount"].iloc[0]:
                 # 卖多了，则从卖出的交易中去除
                 max_sell_bond = self.bonds.loc[self.bonds.bond_code ==
-                                               code, "par_amount"]
+                                               code, "par_amount"].iloc[0]
                 a = sell_trade["par_amount"].to_list()
                 b = np.zeros(len(a))
                 self.get_nearst(a, begin=0, b=b, M=max_sell_bond)
@@ -266,14 +269,14 @@
         # 交易所T+1的全部结算成功
         self.portfolio_update_t1()
         # 银行间T+1和T+0的结算排序结算
-        trades = self.waiting_settlement[(self.waiting_settlement.bond_code[-2:] == "IB") &
+        trades = self.waiting_settlement[(self.waiting_settlement.bond_code.map(lambda x: x[-2:]) == 'IB') &
                                          ((self.waiting_settlement.direction == "买入") | (self.waiting_settlement.direction == "卖出"))]
         trades = trades.sort_values(by=["direction", "par_amount"], ascending=(
             False, False))  # 先卖出后买入，票面金额从大到小排序
         code_sig = trades.drop_duplicates(
             subset=["bond_code"]).bond_code.to_list()
         for code in code_sig:
-            code_trade = trades.loc[trades.bonds_code == code]
+            code_trade = trades[trades.bond_code == code]
             self.get_NIB_(code_trade)
         # 转托管结算
         self.portfolio_update_transfer(direction="out")
Index: utils/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import xlwings as xw\r\nimport json\r\nimport time\r\n\r\ncalculator_path = json.load(\r\n    open('settings.json'), encoding='utf-8')[\"Calculator Path\"]\r\nbook = xw.Book(calculator_path)\r\nbook.app.calculation = 'manual'\r\ncalculator = book.sheets['Bond Calculator!']\r\n\r\n\r\ndef get_numbers(code: str, clean_price: str,\r\n                settlement_date: str, settlement_days: str) -> dict:\r\n    result = {}\r\n    calculator.range('C3').value = code\r\n    calculator.range('C4').value = settlement_date\r\n    calculator.range('C5').value = clean_price\r\n    calculator.range('C8').value = settlement_days\r\n\r\n    book.app.calculate()\r\n    ytm_ = xw.Book(calculator_path).macro(\"模块1.到期收益率_get\")\r\n    ytm_()\r\n\r\n    result['ytm'] = calculator.range('C14').value\r\n    result['accrued interest'] = calculator.range('C11').value\r\n    result['full price'] = calculator.range('C12').value\r\n    return result\r\n\r\n\r\ndef set_deviation(mainwindow, clean_price: float):\r\n    zhongzhai_clean_price_deviation = float(clean_price) - \\\r\n        float(mainwindow.zhongzhai_clean_price.text())\r\n    qingsuansuo_clean_price_deviation = float(clean_price) - \\\r\n        float(mainwindow.qingsuansuo_clean_price.text())\r\n    zhongzheng_clean_price_deviation = float(clean_price) - \\\r\n        float(mainwindow.zhongzheng_clean_price.text())\r\n\r\n    mainwindow.zhongzhai_clean_price_deviation_pct.setText(\r\n        '{:.4f}'.format(100*zhongzhai_clean_price_deviation/float(mainwindow.zhongzhai_clean_price.text())))\r\n    mainwindow.zhongzhai_clean_price_deviation.setText(\r\n        '{:.4f}'.format(zhongzhai_clean_price_deviation))\r\n\r\n    mainwindow.qingsuansuo_clean_price_deviation_pct.setText(\r\n        '{:.4f}'.format(100*qingsuansuo_clean_price_deviation/float(mainwindow.qingsuansuo_clean_price.text())))\r\n    mainwindow.qingsuansuo_clean_price_deviation.setText(\r\n        '{:.4f}'.format(qingsuansuo_clean_price_deviation))\r\n\r\n    mainwindow.zhongzheng_clean_price_deviation_pct.setText(\r\n        '{:.4f}'.format(100*zhongzheng_clean_price_deviation/float(mainwindow.zhongzheng_clean_price.text())))\r\n    mainwindow.zhongzheng_clean_price_deviation.setText(\r\n        '{:.4f}'.format(zhongzheng_clean_price_deviation))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/utils.py b/utils/utils.py
--- a/utils/utils.py	(revision 7a87e68b310ff5abde0dc8d32e66d10bb595cb13)
+++ b/utils/utils.py	(date 1627198663840)
@@ -5,7 +5,6 @@
 calculator_path = json.load(
     open('settings.json'), encoding='utf-8')["Calculator Path"]
 book = xw.Book(calculator_path)
-book.app.calculation = 'manual'
 calculator = book.sheets['Bond Calculator!']
 
 
@@ -17,7 +16,10 @@
     calculator.range('C5').value = clean_price
     calculator.range('C8').value = settlement_days
 
+    book.app.calculation = 'manual'
     book.app.calculate()
+    book.app.calculation = 'automatic'
+
     ytm_ = xw.Book(calculator_path).macro("模块1.到期收益率_get")
     ytm_()
 
Index: utils/excel_utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from PyQt5 import QtWidgets\r\nfrom trade import Trade\r\nimport re\r\nimport xlwings as xw\r\nimport pandas as pd\r\nimport json\r\n\r\n_xlsx_path = json.load(\r\n    open('settings.json'), encoding='utf-8')[\"Trade Monitor Path\"]\r\nbook = xw.Book(_xlsx_path)\r\nbook.app.calculation = 'manual'\r\nspot_sheet = book.sheets['现券交易-债券要素']\r\ntransfer_sheet = book.sheets['转托管-债券要素']\r\ncode_sheet = book.sheets['获取全部代码']\r\n\r\n\r\ndef get_quote(code: str) -> dict:\r\n    # 获取前一天的中债估值等数据\r\n    spot_sheet.range('C4').value = code\r\n    book.app.calculate()\r\n    result = {'中债估值': {'净价': spot_sheet.range('C10').value,\r\n                       'YTM': spot_sheet.range('C13').value},\r\n              '清算所估值': {'净价': spot_sheet.range('C11').value,\r\n                        'YTM': spot_sheet.range('C14').value},\r\n              '中证估值': {'净价': spot_sheet.range('C12').value,\r\n                       'YTM': spot_sheet.range('C15').value}}\r\n    return result\r\n\r\n\r\ndef _export_info(mainwindow):\r\n    sheet = spot_sheet\r\n    # clearing previous info\r\n    sheet.range('C2:C9').value = 0\r\n    sheet.range('E2:E5').value = 0\r\n    sheet.range('E7:E8').value = 0\r\n\r\n    # write new info\r\n    sheet.range('C4').value = mainwindow.code.text()\r\n    sheet.range('C5').value = mainwindow.face_value.text()\r\n    sheet.range('C6').value = mainwindow.clean_price.text()\r\n    sheet.range('C7').value = mainwindow.ytm.text()\r\n    sheet.range('C8').value = mainwindow.full_price.text()\r\n    sheet.range('C9').value = mainwindow.settlement_method.currentText()\r\n\r\n    sheet.range('E4').value = mainwindow.trade_direction.currentText()\r\n    sheet.range('E5').value = mainwindow.settlement_days.currentText()\r\n    # Not actually settlement date\r\n    sheet.range('C3').value = mainwindow.trade_date.text()\r\n    sheet.range('E7').value = mainwindow.accrued_interest.text()\r\n    sheet.range('E8').value = mainwindow.settlement_amount.text()\r\n\r\n    book.app.calculate()\r\n    mainwindow.settlement_amount_capitalized.setText(\r\n        str(sheet.range('E9').value))\r\n\r\n\r\ndef _export_trader_info(mainwindow):\r\n    sheet = spot_sheet\r\n    current_value = sheet.range('B2:E2').value\r\n\r\n    # write new info\r\n    current_value[0] = mainwindow.trader_ui.list_type.currentText()\r\n    current_value[1] = mainwindow.trader_ui.account_list.currentText()\r\n    current_value[2] = mainwindow.counterparty_ui.counterparty_type.currentText()\r\n    current_value[3] = mainwindow.counterparty_ui.counterparty_list.currentText()\r\n    book.app.calculate()\r\n\r\n    sheet.range('B2:E2').value = current_value\r\n\r\n\r\ndef _export_transfer_info(mainwindow):\r\n    sheet = transfer_sheet\r\n    out_account_key_1 = mainwindow.list_type.currentText()\r\n    out_account_key_2 = mainwindow.account_list.currentText()\r\n\r\n    in_account_key_1 = mainwindow.list_type_2.currentText()\r\n    in_account_key_2 = mainwindow.account_list_2.currentText()\r\n\r\n    out_code = mainwindow.code.text()\r\n    target_exchange = mainwindow.target_exchange.text()\r\n    transfer_start_date = mainwindow.transfer_start_date.text()\r\n    transfer_amount = mainwindow.lineEdit.text()\r\n\r\n    sheet.range('C2').value = out_account_key_2\r\n    sheet.range('E2').value = in_account_key_2\r\n    sheet.range('C4').value = out_code\r\n    sheet.range('C6').value = target_exchange\r\n    sheet.range('C7').value = transfer_start_date\r\n    sheet.range('C8').value = transfer_amount\r\n    book.app.calculate()\r\n\r\n    mainwindow.in_code.setText(str(sheet.range('E6').value))\r\n    mainwindow.transfer_finish_date.setText(str(sheet.range('E7').value))\r\n    mainwindow.transfer_amount.setText(str(sheet.range('E8').value))\r\n\r\n\r\ndef get_all_codes(code: str):\r\n    code_sheet.range('B5').value = code\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/excel_utils.py b/utils/excel_utils.py
--- a/utils/excel_utils.py	(revision 7a87e68b310ff5abde0dc8d32e66d10bb595cb13)
+++ b/utils/excel_utils.py	(date 1627198663845)
@@ -8,7 +8,6 @@
 _xlsx_path = json.load(
     open('settings.json'), encoding='utf-8')["Trade Monitor Path"]
 book = xw.Book(_xlsx_path)
-book.app.calculation = 'manual'
 spot_sheet = book.sheets['现券交易-债券要素']
 transfer_sheet = book.sheets['转托管-债券要素']
 code_sheet = book.sheets['获取全部代码']
@@ -17,7 +16,10 @@
 def get_quote(code: str) -> dict:
     # 获取前一天的中债估值等数据
     spot_sheet.range('C4').value = code
+    book.app.calculation = 'manual'
     book.app.calculate()
+    book.app.calculation = 'automatic'
+
     result = {'中债估值': {'净价': spot_sheet.range('C10').value,
                        'YTM': spot_sheet.range('C13').value},
               '清算所估值': {'净价': spot_sheet.range('C11').value,
Index: trader.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"\\u5185\\u90e8\\u8d26\\u6237\": {\"A\": {\"position\": {\"210205.IB\": 10000000.0, \"210303.IB\": 35000000.0, \"210006.IB\": 40000000.0}, \"cash\": 100000000.0}, \"B\": {\"position\": {\"019656.SH\": 10000000.0, \"210303.IB\": 20000000.0, \"019654.SH\": 60000000.0}, \"cash\": 30000000.0}}}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/trader.json b/trader.json
--- a/trader.json	(revision 7a87e68b310ff5abde0dc8d32e66d10bb595cb13)
+++ b/trader.json	(date 1627207660299)
@@ -1,1 +1,1 @@
-{"\u5185\u90e8\u8d26\u6237": {"A": {"position": {"210205.IB": 10000000.0, "210303.IB": 35000000.0, "210006.IB": 40000000.0}, "cash": 100000000.0}, "B": {"position": {"019656.SH": 10000000.0, "210303.IB": 20000000.0, "019654.SH": 60000000.0}, "cash": 30000000.0}}}
\ No newline at end of file
+{"\u5185\u90e8\u8d26\u6237": {"A": {"position": {"210205.IB": 10000000.0, "210303.IB": 35000000.0, "210006.IB": 41000000.0}, "cash": 94972845.0}, "B": {"position": {"019656.SH": 11000000.0, "210303.IB": 20000000.0, "019654.SH": 63000000.0}, "cash": 27989008.0}}}
\ No newline at end of file
